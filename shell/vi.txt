
i: 插入模式  从目前所在光标处插入
I: 在目前所在行的第一个非空格符处开始插入
a：在光标后附加
A：在行末附加
o: 在光标所在行的下方插入一行并切换到输入模式
O: 在光标所在行的上方插入一行并切换到输入模式
r:取代模式取代光标所在的那一个字符一次
R:会一直取代光标所在的文字，直到按下ESC为止
esc:切换到命令式
dd:删除光标所在行
ndd:删除光标所在行及后面行（共n行)
u：撤销,复原前一个动作
ctrl+r:重做上一个动作
x：删除光标所在位置的字符
X（大写）：删除光标所在位置的前一个字符

yy（或大写Y）：复制光标所在行
nyy:复制光标所在行及后面行（共n行）
p：在光标所在行的下方粘贴
P（大写）：在光标所在行的上方粘贴

b:至上一个单词或标点的开头
B（标点）:至上一个单词的开头，忽略标点
w:至下一个单词或标点的开头
W（标点）:至下一个单词的开头，忽略标点
h:光标左移
j:光标下移
k:光标上移
l:光标右移
0：本行开头
shift-6(^) ：光标至本行第一个非空字符
shift-4（$）:光标至本行的末尾
shift-g(G):光标至文件最后一行
nG:移动到这个档案的第n行
gg：移动到这个档案的第一行，相当于1G
n<Enter>:光标向下移动n行

ctrl + f 向下翻页（front）
ctrl + b 向上翻页（back）
ctrl + d 向下翻半页（down）
ctrl + u 向上翻半页（up）

:w 保存 :q 退出 :!强制执行
:wq 保存退出
:n 光标快速定位到第n行
:w filename 将编辑的数据储存成另一个档案（类似另存新档）
:r filename在编辑的数据中，读入另一个档案的数据。亦即将filename这个档案内容加到游标所在行后面
:n1,n2 w filename 将n1到n2的内容储存成filename这个档案
:!command暂时离开vi到指令列模式下执行command的显示结果。
例如:!ls /home  即可在vi当中查看/home底下以ls输出的档案信息！
/*** :定位*** n键向后搜索,N键向前搜索
?*** :定位*** n键向前搜索
:set nu :显示行号
:set nonu:取消行号
:set list:行末加$
:set nolist:行末取消$
:$ :定位到最后一行
:e! :回退到最后一次保存时的状态
:.,$s/word1/word2/g    当前行到末行，将所有的word1替换成word2
:%s/word1/word2/g       %简洁的代表从文本的第一行到最后一行
:%s/word1/word2/gc		在取代前显示提示字符给用户确认是否需要取代
vi + 文件名: 光标定位到最后一行
vi +3  文件名: 光标定位到第三行    数字超过最大值，则定位到最后一行
vi +/*** 文件名:定位***第一次出现的行首  按n键来回切换匹配的字符  */
vi aa bb cc：创建3个文件   底行命令输入:n切换到下一个文件
:N(或者:prev)切换到上一个文件

多档案编辑：
:n 编辑下一个档案
:N 编辑上一个档案
:files列出目前这个vim的开启的所有档案

文本删除命令：
x           删除当前字符
3x当前字符和之后2个字符
dd当前行
5dd当前行和之后4行
d$当前字符到当前行的末尾
d0当前字符到当前行的起始
dG当前行到文件末尾
d1G当前行到文件首
d20G当前行到文件第20行

:set noai
:set bg=dark
:set bg=light(预设)

多窗口功能：
:sp [filename]   开启一个新窗口，如果有加filename，表示在新窗口开启
           一个新档案，否则表示两个窗口为同一个档案内容（同步显示）。
		   ctrl+w+↑
		   ctrl+w+k按键的按法是：先按下ctrl不放，再按下w后放开所有的按键，
		   然后再按下j（或向下箭头键），则光标可移动到下方的窗口。
		   ctrl+w+↓
		   ctrl+w+j
		   ctrl+w+q    相当于:q

区块选择：
v   字符选择，会将光标经过的地方反白选择
V(大写)  行选择 ，会将光标经过的行反白选择
ctrl+v  区块选择，可以用长方形的方式选择资料
y   将反白的地方复制起来
d   将反白的地方删除掉
ctrl+v 区块选择之后，按I键，添加要插入的字符，按esc键，实现在区块所选行前批量添加相同字符

:set paste	在粘贴前设置，进入粘贴插入模式，即不会自动缩进和连续注释
:set nopaste	取消粘贴插入模式

bash命令行默认模拟emacs的快捷键：
  set -o vi   让bash命令行模拟vi操作
  set -o emacs   emacs编辑模式(默认)
